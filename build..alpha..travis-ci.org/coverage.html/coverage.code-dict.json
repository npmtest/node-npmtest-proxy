{"/home/travis/build/npmtest/node-npmtest-proxy/test.js":"/* istanbul instrument in package npmtest_proxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-proxy/lib.npmtest_proxy.js":"/* istanbul instrument in package npmtest_proxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_proxy = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_proxy = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-proxy/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-proxy && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_proxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_proxy\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_proxy.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_proxy.rollup.js'] =\n            local.assetsDict['/assets.npmtest_proxy.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_proxy.__dirname + '/lib.npmtest_proxy.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-proxy/node_modules/proxy/proxy.js":"\n/**\n * Module dependencies.\n */\n\nvar net = require('net');\nvar url = require('url');\nvar http = require('http');\nvar assert = require('assert');\nvar debug = require('debug')('proxy');\n\n// log levels\ndebug.request = require('debug')('proxy ← ← ←');\ndebug.response = require('debug')('proxy → → →');\ndebug.proxyRequest = require('debug')('proxy ↑ ↑ ↑');\ndebug.proxyResponse = require('debug')('proxy ↓ ↓ ↓');\n\n// hostname\nvar hostname = require('os').hostname();\n\n// proxy server version\nvar version  = require('./package.json').version;\n\n/**\n * Module exports.\n */\n\nmodule.exports = setup;\n\n/**\n * Sets up an `http.Server` or `https.Server` instance with the necessary\n * \"request\" and \"connect\" event listeners in order to make the server act as an\n * HTTP proxy.\n *\n * @param {http.Server|https.Server} server\n * @param {Object} options\n * @api public\n */\n\nfunction setup (server, options) {\n  if (!server) server = http.createServer();\n  server.on('request', onrequest);\n  server.on('connect', onconnect);\n  return server;\n}\n\n/**\n * 13.5.1 End-to-end and Hop-by-hop Headers\n *\n * Hop-by-hop headers must be removed by the proxy before passing it on to the\n * next endpoint. Per-request basis hop-by-hop headers MUST be listed in a\n * Connection header, (section 14.10) to be introduced into HTTP/1.1 (or later).\n */\n\nvar hopByHopHeaders = [\n  'Connection',\n  'Keep-Alive',\n  'Proxy-Authenticate',\n  'Proxy-Authorization',\n  'TE',\n  'Trailers',\n  'Transfer-Encoding',\n  'Upgrade'\n];\n\n// create a case-insensitive RegExp to match \"hop by hop\" headers\nvar isHopByHop = new RegExp('^(' + hopByHopHeaders.join('|') + ')$', 'i');\n\n/**\n * Iterator function for the request/response's \"headers\".\n * Invokes `fn` for \"each\" header entry in the request.\n *\n * @api private\n */\n\nfunction eachHeader (obj, fn) {\n  if (Array.isArray(obj.rawHeaders)) {\n    // ideal scenario... >= node v0.11.x\n    // every even entry is a \"key\", every odd entry is a \"value\"\n    var key = null;\n    obj.rawHeaders.forEach(function (v) {\n      if (key === null) {\n        key = v;\n      } else {\n        fn(key, v);\n        key = null;\n      }\n    });\n  } else {\n    // otherwise we can *only* proxy the header names as lowercase'd\n    var headers = obj.headers;\n    if (!headers) return;\n    Object.keys(headers).forEach(function (key) {\n      var value = headers[key];\n      if (Array.isArray(value)) {\n        // set-cookie\n        value.forEach(function (val) {\n          fn(key, val);\n        });\n      } else {\n        fn(key, value);\n      }\n    });\n  }\n}\n\n/**\n * HTTP GET/POST/DELETE/PUT, etc. proxy requests.\n */\n\nfunction onrequest (req, res) {\n  debug.request('%s %s HTTP/%s ', req.method, req.url, req.httpVersion);\n  var server = this;\n  var socket = req.socket;\n\n  // pause the socket during authentication so no data is lost\n  socket.pause();\n\n  authenticate(server, req, function (err, auth) {\n    socket.resume();\n    if (err) {\n      // an error occured during login!\n      res.writeHead(500);\n      res.end((err.stack || err.message || err) + '\\n');\n      return;\n    }\n    if (!auth) return requestAuthorization(req, res);\n    var parsed = url.parse(req.url);\n\n    // proxy the request HTTP method\n    parsed.method = req.method;\n\n    // setup outbound proxy request HTTP headers\n    var headers = {};\n    var hasXForwardedFor = false;\n    var hasVia = false;\n    var via = '1.1 ' + hostname + ' (proxy/' + version + ')';\n\n    parsed.headers = headers;\n    eachHeader(req, function (key, value) {\n      debug.request('Request Header: \"%s: %s\"', key, value);\n      var keyLower = key.toLowerCase();\n\n      if (!hasXForwardedFor && 'x-forwarded-for' === keyLower) {\n        // append to existing \"X-Forwarded-For\" header\n        // http://en.wikipedia.org/wiki/X-Forwarded-For\n        hasXForwardedFor = true;\n        value += ', ' + socket.remoteAddress;\n        debug.proxyRequest('appending to existing \"%s\" header: \"%s\"', key, value);\n      }\n\n      if (!hasVia && 'via' === keyLower) {\n        // append to existing \"Via\" header\n        hasVia = true;\n        value += ', ' + via;\n        debug.proxyRequest('appending to existing \"%s\" header: \"%s\"', key, value);\n      }\n\n      if (isHopByHop.test(key)) {\n        debug.proxyRequest('ignoring hop-by-hop header \"%s\"', key);\n      } else {\n        var v = headers[key];\n        if (Array.isArray(v)) {\n          v.push(value);\n        } else if (null != v) {\n          headers[key] = [ v, value ];\n        } else {\n          headers[key] = value;\n        }\n      }\n    });\n\n    // add \"X-Forwarded-For\" header if it's still not here by now\n    // http://en.wikipedia.org/wiki/X-Forwarded-For\n    if (!hasXForwardedFor) {\n      headers['X-Forwarded-For'] = socket.remoteAddress;\n      debug.proxyRequest('adding new \"X-Forwarded-For\" header: \"%s\"', headers['X-Forwarded-For']);\n    }\n\n    // add \"Via\" header if still not set by now\n    if (!hasVia) {\n      headers.Via = via;\n      debug.proxyRequest('adding new \"Via\" header: \"%s\"', headers.Via);\n    }\n\n    // custom `http.Agent` support, set `server.agent`\n    var agent = server.agent;\n    if (null != agent) {\n      debug.proxyRequest('setting custom `http.Agent` option for proxy request: %s', agent);\n      parsed.agent = agent;\n      agent = null;\n    }\n\n    if (null == parsed.port) {\n      // default the port number if not specified, for >= node v0.11.6...\n      // https://github.com/joyent/node/issues/6199\n      parsed.port = 80;\n    }\n\n    if ('http:' != parsed.protocol) {\n      // only \"http://\" is supported, \"https://\" should use CONNECT method\n      res.writeHead(400);\n      res.end('Only \"http:\" protocol prefix is supported\\n');\n      return;\n    }\n\n    var gotResponse = false;\n    var proxyReq = http.request(parsed);\n    debug.proxyRequest('%s %s HTTP/1.1 ', proxyReq.method, proxyReq.path);\n\n    proxyReq.on('response', function (proxyRes) {\n      debug.proxyResponse('HTTP/1.1 %s', proxyRes.statusCode);\n      gotResponse = true;\n\n      var headers = {};\n      eachHeader(proxyRes, function (key, value) {\n        debug.proxyResponse('Proxy Response Header: \"%s: %s\"', key, value);\n        if (isHopByHop.test(key)) {\n          debug.response('ignoring hop-by-hop header \"%s\"', key);\n        } else {\n          var v = headers[key];\n          if (Array.isArray(v)) {\n            v.push(value);\n          } else if (null != v) {\n            headers[key] = [ v, value ];\n          } else {\n            headers[key] = value;\n          }\n        }\n      });\n\n      debug.response('HTTP/1.1 %s', proxyRes.statusCode);\n      res.writeHead(proxyRes.statusCode, headers);\n      proxyRes.pipe(res);\n      res.on('finish', onfinish);\n    });\n    proxyReq.on('error', function (err) {\n      debug.proxyResponse('proxy HTTP request \"error\" event\\n%s', err.stack || err);\n      cleanup();\n      if (gotResponse) {\n        debug.response('already sent a response, just destroying the socket...');\n        socket.destroy();\n      } else if ('ENOTFOUND' == err.code) {\n        debug.response('HTTP/1.1 404 Not Found');\n        res.writeHead(404);\n        res.end();\n      } else {\n        debug.response('HTTP/1.1 500 Internal Server Error');\n        res.writeHead(500);\n        res.end();\n      }\n    });\n\n    // if the client closes the connection prematurely,\n    // then close the upstream socket\n    function onclose () {\n      debug.request('client socket \"close\" event, aborting HTTP request to \"%s\"', req.url);\n      proxyReq.abort();\n      cleanup();\n    }\n    socket.on('close', onclose);\n\n    function onfinish () {\n      debug.response('\"finish\" event');\n      cleanup();\n    }\n\n    function cleanup () {\n      debug.response('cleanup');\n      socket.removeListener('close', onclose);\n      res.removeListener('finish', onfinish);\n    }\n\n    req.pipe(proxyReq);\n  });\n}\n\n/**\n * HTTP CONNECT proxy requests.\n */\n\nfunction onconnect (req, socket, head) {\n  debug.request('%s %s HTTP/%s ', req.method, req.url, req.httpVersion);\n  assert(!head || 0 == head.length, '\"head\" should be empty for proxy requests');\n\n  var res;\n  var target;\n  var gotResponse = false;\n\n  // define request socket event listeners\n  function onclientclose (err) {\n    debug.request('HTTP request %s socket \"close\" event', req.url);\n  }\n  socket.on('close', onclientclose);\n\n  function onclientend () {\n    debug.request('HTTP request %s socket \"end\" event', req.url);\n    cleanup();\n  }\n\n  function onclienterror (err) {\n    debug.request('HTTP request %s socket \"error\" event:\\n%s', req.url, err.stack || err);\n  }\n  socket.on('error', onclienterror);\n\n  // define target socket event listeners\n  function ontargetclose () {\n    debug.proxyResponse('proxy target %s \"close\" event', req.url);\n    cleanup();\n    socket.destroy();\n  }\n\n  function ontargetend () {\n    debug.proxyResponse('proxy target %s \"end\" event', req.url);\n    cleanup();\n  }\n\n  function ontargeterror (err) {\n    debug.proxyResponse('proxy target %s \"error\" event:\\n%s', req.url, err.stack || err);\n    cleanup();\n    if (gotResponse) {\n      debug.response('already sent a response, just destroying the socket...');\n      socket.destroy();\n    } else if ('ENOTFOUND' == err.code) {\n      debug.response('HTTP/1.1 404 Not Found');\n      res.writeHead(404);\n      res.end();\n    } else {\n      debug.response('HTTP/1.1 500 Internal Server Error');\n      res.writeHead(500);\n      res.end();\n    }\n  }\n\n  function ontargetconnect () {\n    debug.proxyResponse('proxy target %s \"connect\" event', req.url);\n    debug.response('HTTP/1.1 200 Connection established');\n    gotResponse = true;\n    res.removeListener('finish', onfinish);\n\n    res.writeHead(200, 'Connection established');\n\n    // HACK: force a flush of the HTTP header\n    res._send('');\n\n    // relinquish control of the `socket` from the ServerResponse instance\n    res.detachSocket(socket);\n\n    // nullify the ServerResponse object, so that it can be cleaned\n    // up before this socket proxying is completed\n    res = null;\n\n    socket.pipe(target);\n    target.pipe(socket);\n  }\n\n  // cleans up event listeners for the `socket` and `target` sockets\n  function cleanup () {\n    debug.response('cleanup');\n    socket.removeListener('close', onclientclose);\n    socket.removeListener('error', onclienterror);\n    socket.removeListener('end', onclientend);\n    if (target) {\n      target.removeListener('connect', ontargetconnect);\n      target.removeListener('close', ontargetclose);\n      target.removeListener('error', ontargeterror);\n      target.removeListener('end', ontargetend);\n    }\n  }\n\n  // create the `res` instance for this request since Node.js\n  // doesn't provide us with one :(\n  // XXX: this is undocumented API, so it will break some day (ノಠ益ಠ)ノ彡┻━┻\n  res = new http.ServerResponse(req);\n  res.shouldKeepAlive = false;\n  res.chunkedEncoding = false;\n  res.useChunkedEncodingByDefault = false;\n  res.assignSocket(socket);\n\n  // called for the ServerResponse's \"finish\" event\n  // XXX: normally, node's \"http\" module has a \"finish\" event listener that would\n  // take care of closing the socket once the HTTP response has completed, but\n  // since we're making this ServerResponse instance manually, that event handler\n  // never gets hooked up, so we must manually close the socket...\n  function onfinish () {\n    debug.response('response \"finish\" event');\n    res.detachSocket(socket);\n    socket.end();\n  }\n  res.once('finish', onfinish);\n\n  // pause the socket during authentication so no data is lost\n  socket.pause();\n\n  authenticate(this, req, function (err, auth) {\n    socket.resume();\n    if (err) {\n      // an error occured during login!\n      res.writeHead(500);\n      res.end((err.stack || err.message || err) + '\\n');\n      return;\n    }\n    if (!auth) return requestAuthorization(req, res);\n\n    var parts = req.url.split(':');\n    var host = parts[0];\n    var port = +parts[1];\n    var opts = { host: host, port: port };\n\n    debug.proxyRequest('connecting to proxy target %j', opts);\n    target = net.connect(opts);\n    target.on('connect', ontargetconnect);\n    target.on('close', ontargetclose);\n    target.on('error', ontargeterror);\n    target.on('end', ontargetend);\n  });\n}\n\n/**\n * Checks `Proxy-Authorization` request headers. Same logic applied to CONNECT\n * requests as well as regular HTTP requests.\n *\n * @param {http.Server} server\n * @param {http.ServerRequest} req\n * @param {Function} fn callback function\n * @api private\n */\n\nfunction authenticate (server, req, fn) {\n  var hasAuthenticate = 'function' == typeof server.authenticate;\n  if (hasAuthenticate) {\n    debug.request('authenticating request \"%s %s\"', req.method, req.url);\n    server.authenticate(req, fn);\n  } else {\n    // no `server.authenticate()` function, so just allow the request\n    fn(null, true);\n  }\n}\n\n/**\n * Sends a \"407 Proxy Authentication Required\" HTTP response to the `socket`.\n *\n * @api private\n */\n\nfunction requestAuthorization (req, res) {\n  // request Basic proxy authorization\n  debug.response('requesting proxy authorization for \"%s %s\"', req.method, req.url);\n\n  // TODO: make \"realm\" and \"type\" (Basic) be configurable...\n  var realm = 'proxy';\n\n  var headers = {\n    'Proxy-Authenticate': 'Basic realm=\"' + realm + '\"'\n  };\n  res.writeHead(407, headers);\n  res.end();\n}\n"}